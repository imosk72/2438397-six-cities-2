openapi: 3.0.0
info:
  title: API Six Cities
  version: 1.0

paths:
  /offer:
    get:
      tags:
        - Offers
      summary: Gets a list of offers
      description: Retrieve a list of offers with optional pagination.
      parameters:
        - name: limit
          in: query
          description: The maximum number of offers to return (optional)
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The number of offers to skip (optional)
          required: false
          schema:
            type: integer
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
        400:
          description: Validation Error

    post:
      tags:
        - Offers
      summary: Creates a new offer
      description: Creates a new offer and returns offer model.
      parameters:
        - name: Authorization
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOffer'
      responses:
        201:
          description: Offer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        400:
          description: Validation Error
        401:
          description: Unauthorized

  /offer/{offerId}:
    parameters:
      - name: offerId
        in: path
        required: true
        description: The ID of the offer to manipulate
        schema:
          type: string
    get:
      tags:
        - Offers
      summary: Get an offer by ID
      description: Retrieve an offer by its unique ID.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        404:
          description: Offer not found

    put:
      tags:
        - Offers
      summary: Update an offer by ID
      description: Update an offer by its unique ID.
      parameters:
        - name: Authorization
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOffer'
      responses:
        204:
          description: Offer updated successfully
        404:
          description: Offer not found
        400:
          description: Validation Error
        401:
          description: Unauthorized
        403:
          description: Not enough access rights

    delete:
      tags:
        - Offers
      summary: Delete an offer by ID
      description: Delete an offer by its unique ID.
      parameters:
        - name: Authorization
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        204:
          description: Offer deleted successfully
        404:
          description: Offer not found
        401:
          description: Unauthorized
        403:
          description: Not enough access rights

  /comment/{OfferId}:
    get:
      tags:
        - Comments
      summary: Get comments for an offer
      parameters:
        - name: offerId
          in: path
          required: true
          description: The ID of the offer to retrieve comments for
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of comments to return (optional)
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The number of comments to skip (optional)
          required: false
          schema:
            type: integer
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        404:
          description: Offer not found

  /comment:
    post:
      tags:
        - Comments
      summary: Create a new comment for an offer
      parameters:
        - name: Authorization
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComment'
      responses:
        201:
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: Validation Error
        401:
          description: Unauthorized

  /user/favourite/{offerId}:
    post:
      tags:
        - Favourites
      summary: Adds an offer to favorites
      description: Adds an offer to the user's list of favorites.
      parameters:
        - name: offerId
          in: path
          required: true
          description: The ID of the offer to add to favorites
          schema:
            type: string
        - name: Authorization
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        204:
          description: Offer added to favorites successfully
        404:
          description: Offer not found
        401:
          description: Unauthorized

    delete:
      tags:
        - Favourites
      summary: Remove an offer from favorites
      description: Remove an offer from the user's list of favorites.
      parameters:
        - name: offerId
          in: path
          required: true
          description: The ID of the offer to remove from favorites
          schema:
            type: string
        - name: Authorization
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        204:
          description: Offer removed from favorites successfully
        404:
          description: Offer not found
        401:
          description: Unauthorized

  /user/favourite:
    get:
      tags:
        - Favourites
      summary: Get list of favourite offers
      parameters:
        - name: Authorization
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        201:
          description: Offer added to favorites successfully
        401:
          description: Unauthorized

  /user/avatar:
    post:
      tags:
        - Users
      summary: Upload avatar
      parameters:
        - name: Authorization
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        201:
          description: Avatar uploaded
        400:
          description: Bad file
        401:
          description: Unauthorized

  /user/me:
    get:
      tags:
        - Users
      summary: Gets the current user
      parameters:
        - name: Authorization
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized

  /user/login:
    post:
      tags:
        - Users
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        204:
          description: User logged in successfully. Returns `Authorization` header with token
        400:
          description: Validation Error
        401:
          description: Unauthorized

  /user/logout:
    post:
      tags:
        - Users
      summary: Logout the current user
      parameters:
        - name: Authorization
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
      responses:
        204:
          description: User logged out successfully
        401:
          description: Unauthorized

  /user/register:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Validation Error


tags:
  - name: Offers
    description: Endpoints related to offers.

  - name: Comments
    description: Endpoints related to comments on offers.

  - name: Users
    description: Endpoints related to user management, login, and registration.

  - name: Favourites
    description: Endpoints related to managing favorite offers.

components:
  schemas:
    UserType:
      type: string
      enum:
        - standart
        - pro

    City:
      type: string
      enum:
        - Paris
        - Cologne
        - Brussels
        - Amsterdam
        - Hamburg
        - Dusseldorf

    HousingType:
      type: string
      enum:
        - apartment
        - house
        - room
        - hotel

    Facilities:
      type: string
      enum:
        - Breakfast
        - Air conditioning
        - Laptop friendly workspace
        - Baby seat
        - Washer
        - Towels
        - Fridge

    Coordinates:
      type: object
      properties:
        latitude:
          type: number
        longitude:
          type: number
      required:
        - latitude
        - longitude

    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        avatar:
          type: string
        type:
          $ref: '#/components/schemas/UserType'
      required:
        - id
        - username
        - email
        - type

    Offer:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        date:
          type: string
          format: date-time
        city:
          $ref: '#/components/schemas/City'
        preview:
          type: string
        images:
          type: array
          items:
            type: string
        isPremium:
          type: boolean
        isFavourite:
          type: boolean
        rating:
          type: number
        housingType:
          $ref: '#/components/schemas/HousingType'
        roomCount:
          type: number
        guestCount:
          type: number
        cost:
          type: number
        facilities:
          type: array
          items:
            $ref: '#/components/schemas/Facilities'
        authorId:
          type: string
        commentsCount:
          type: number
        commentsTotalRating:
          type: number
        coordinates:
          $ref: '#/components/schemas/Coordinates'
      required:
        - id
        - title
        - description
        - publicationDate
        - city
        - preview
        - images
        - isPremium
        - isFavourite
        - rating
        - housingType
        - roomCount
        - guestCount
        - cost
        - facilities
        - author
        - commentsCount
        - coordinates

    Comment:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        date:
          type: string
          format: date-time
        offerId:
          type: string
        rating:
          type: number
        userId:
          type: string
      required:
        - id
        - text
        - date
        - offerId
        - rating
        - userId

    CreateOffer:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        date:
          type: string
          format: date-time
        city:
          $ref: '#/components/schemas/City'
        preview:
          type: string
        images:
          type: array
          items:
            type: string
        isPremium:
          type: boolean
        isFavourite:
          type: boolean
        rating:
          type: number
        housingType:
          $ref: '#/components/schemas/HousingType'
        roomCount:
          type: number
        guestCount:
          type: number
        cost:
          type: number
        facilities:
          type: array
          items:
            $ref: '#/components/schemas/Facilities'
        authorId:
          type: string
        commentsCount:
          type: number
        commentsTotalRating:
          type: number
        coordinates:
          $ref: '#/components/schemas/Coordinates'
      required:
        - title
        - description
        - publicationDate
        - city
        - preview
        - images
        - isPremium
        - isFavourite
        - rating
        - housingType
        - roomCount
        - guestCount
        - cost
        - facilities
        - author
        - commentsCount
        - coordinates


    CreateUser:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        avatar:
          type: string
        type:
          $ref: '#/components/schemas/UserType'
      required:
        - username
        - email
        - type

    CreateComment:
      type: object
      properties:
        text:
          type: string
        date:
          type: string
          format: date-time
        offerId:
          type: string
        rating:
          type: number
      required:
        - text
        - date
        - offerId
        - rating
